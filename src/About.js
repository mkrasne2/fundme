import React, { useEffect, useState } from "react";
import './App.css';
import { Helmet } from 'react-helmet';

const About = () => {
	
	
	
  

  return (
		<div className="App">
      <Helmet>
        <title>About the Fundme Decentralized Application</title>
        <meta name="description" content="Learn about the technical fundamentals that power this p2p crowdfunding service on the Polygon Mumbai network." />
        
      </Helmet>
		
      <div className="container">
        <div className="header-container">
        <header>
        
          
         </header>
				<div >
        <p className="title">About Fundme</p>
        <br></br>
        <p className="subtitle">A few technical details</p>
            
						
            </div>
          
        </div>
       
				<p className = "rules"><strong>Clonefactory Method:</strong>
        <br></br>
        <br></br>
        This system operates by using minimal proxy contracts that are generated every time someone initializes a funding contract. This creates a clone of the base
        contract using the Clonefactory method, which significantly saves in gas costs by delegating all calls to the master contract address.
        <br></br>
        <br></br>
        <br></br>
        <br></br>
        <strong>Base Contract:</strong>
        <br></br>
        <br></br>
        The base contract is initialized using the method above by a user who wants to set up a Fundme campaign, similar to gofundme.com. There are no fees build into
        the system, so 100% of contributions would go to the creator of the campaign. The user sets a name, an overview, funding goal, and deadline for their campaign.
        The smart contract allows the user to withdraw funds only after the deadline to contribute has passed, and other users can only contribute before that deadline.
        The creator of the campaign can withdraw the funds after the deadline regardless of whether they've reached their goal or not.
        <br></br>
        <br></br>
        <br></br>
        <br></br>
        <strong>Frontend:</strong>
        <br></br>
        <br></br>
        Similar to gofundme.com, I wanted the user to be able to share a web page for their campaign that's auto-generated by the website (built with React).
        Therefore, I enabled useParams (react-router-dom) and the newly created contract address as the parameter which then gets fed into the ethers.js Frontend
        code that pulls the relevant data pertaining to that campaign.
        <br></br>
        <br></br>
        <br></br>
        <br></br>
        <strong>Network:</strong>
        <br></br>
        <br></br>
        Due to easy testnet MATIC accessibility, I've deployed this project to Polygon Mumbai. The frontend will prompt you to switch to Polygon Mumbai if you 
        are connected to a different network. 
        <br></br>
        <br></br>
        <br></br>
        <br></br>
        <strong>Contract links:</strong>
        <br></br>
        <br></br>
        You can find the contract links here:
        <br></br>
        <br></br>
        <a href="https://mumbai.polygonscan.com/address/0x6612AECc01Ae5134d8748064c4480E1E92B13dF3#code">Base Fundme Contract</a>
        <br></br>
        <br></br>
        <a href="https://mumbai.polygonscan.com/address/0x00977C3a2a6b14AC081A9b3e356B6996e525aB21#code">Fundfactory Contract</a>
        </p>
        <div className="footer-container">
        </div>
      </div>
			
			
			
    </div>
  );
};

export default About;